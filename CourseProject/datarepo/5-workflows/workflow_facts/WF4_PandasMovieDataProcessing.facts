
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'TMDB_Movies_DataCleaning_Using_Pandas', 'TMDB_Movies_DataCleaning_Using_Pandas', 1, 46).
program(2, 'LoadDataUsingPandas', 'TMDB_Movies_DataCleaning_Using_Pandas.LoadDataUsingPandas', 5, 10).
program(3, 'IdentifyColumnsToProcessUsingPandas', 'TMDB_Movies_DataCleaning_Using_Pandas.IdentifyColumnsToProcessUsingPandas', 11, 16).
program(4, 'CreateBinaryEncodedColumnsForEachGenre', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre', 17, 25).
program(5, 'FetchCorrectReleaseDataUsingTmdbAPI', 'TMDB_Movies_DataCleaning_Using_Pandas.FetchCorrectReleaseDataUsingTmdbAPI', 26, 30).
program(6, 'AddNewProcessedColumnsToCreditsDataset', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset', 31, 43).

% FACT: workflow(program_id).
workflow(1).
workflow(5).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).
has_subprogram(1, 5).
has_subprogram(1, 6).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'tmdb_5000_movies-OpenRefineProcessed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas<-tmdb_5000_movies-OpenRefineProcessed.csv', 3, 1).
port(23, 'out', 'tmdb_5000_movies-OpenRefine-Pandas-Processed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas->tmdb_5000_movies-OpenRefine-Pandas-Processed.csv', 44, 12).
port(2, 'in', 'tmdb_5000_movies-OpenRefineProcessed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas.LoadDataUsingPandas<-tmdb_5000_movies-OpenRefineProcessed.csv', 7, 2).
port(3, 'out', 'movies_data_in_pandas_dataframe', 'TMDB_Movies_DataCleaning_Using_Pandas.LoadDataUsingPandas->movies_data_in_pandas_dataframe', 9, 3).
port(4, 'in', 'movies_data_in_pandas_dataframe', 'TMDB_Movies_DataCleaning_Using_Pandas.IdentifyColumnsToProcessUsingPandas<-movies_data_in_pandas_dataframe', 13, 3).
port(5, 'out', 'genres', 'TMDB_Movies_DataCleaning_Using_Pandas.IdentifyColumnsToProcessUsingPandas->genres', 14, 4).
port(6, 'out', 'release_date', 'TMDB_Movies_DataCleaning_Using_Pandas.IdentifyColumnsToProcessUsingPandas->release_date', 15, 5).
port(7, 'in', 'genres', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre<-genres', 19, 4).
port(8, 'out', 'genre_type_action', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre->genre_type_action', 20, 6).
port(9, 'out', 'genre_type_adventure', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre->genre_type_adventure', 21, 7).
port(10, 'out', '...17_others...', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre->...17_others...', 22, 8).
port(11, 'out', 'genre_type_war', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre->genre_type_war', 23, 9).
port(12, 'out', 'genre_type_western', 'TMDB_Movies_DataCleaning_Using_Pandas.CreateBinaryEncodedColumnsForEachGenre->genre_type_western', 24, 10).
port(13, 'in', 'release_date', 'TMDB_Movies_DataCleaning_Using_Pandas.FetchCorrectReleaseDataUsingTmdbAPI<-release_date', 28, 5).
port(14, 'out', 'release_date', 'TMDB_Movies_DataCleaning_Using_Pandas.FetchCorrectReleaseDataUsingTmdbAPI->release_date', 29, 5).
port(15, 'in', 'tmdb_5000_movies-OpenRefineProcessed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-tmdb_5000_movies-OpenRefineProcessed.csv', 33, 2).
port(16, 'in', 'genre_type_action', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-genre_type_action', 35, 6).
port(17, 'in', 'genre_type_adventure', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-genre_type_adventure', 36, 7).
port(18, 'in', '...17_others...', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-...17_others...', 37, 8).
port(19, 'in', 'genre_type_war', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-genre_type_war', 38, 9).
port(20, 'in', 'genre_type_western', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-genre_type_western', 39, 10).
port(21, 'in', 'release_date', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset<-release_date', 40, 5).
port(22, 'out', 'tmdb_5000_movies-OpenRefine-Pandas-Processed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas.AddNewProcessedColumnsToCreditsDataset->tmdb_5000_movies-OpenRefine-Pandas-Processed.csv', 41, 11).

% FACT: port_alias(port_id, alias).

% FACT: port_uri_template(port_id, uri).
port_uri_template(1, 'file://tmdb_5000_movies-OpenRefineProcessed.csv').
port_uri_template(23, 'file://tmdb_5000_movies-OpenRefine-Pandas-Processed.csv').
port_uri_template(2, 'file://tmdb_5000_movies-OpenRefineProcessed.csv').
port_uri_template(15, 'file://tmdb_5000_movies-OpenRefineProcessed.csv').
port_uri_template(22, 'file://tmdb_5000_movies-OpenRefine-Pandas-Processed.csv').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(2, 2).
has_in_port(3, 4).
has_in_port(4, 7).
has_in_port(5, 13).
has_in_port(6, 15).
has_in_port(6, 16).
has_in_port(6, 17).
has_in_port(6, 18).
has_in_port(6, 19).
has_in_port(6, 20).
has_in_port(6, 21).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 23).
has_out_port(2, 3).
has_out_port(3, 5).
has_out_port(3, 6).
has_out_port(4, 8).
has_out_port(4, 9).
has_out_port(4, 10).
has_out_port(4, 11).
has_out_port(4, 12).
has_out_port(5, 14).
has_out_port(6, 22).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'tmdb_5000_movies-OpenRefineProcessed.csv', '[tmdb_5000_movies-OpenRefineProcessed.csv]').
data(12, 'tmdb_5000_movies-OpenRefine-Pandas-Processed.csv', '[tmdb_5000_movies-OpenRefine-Pandas-Processed.csv]').
data(2, 'tmdb_5000_movies-OpenRefineProcessed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas[tmdb_5000_movies-OpenRefineProcessed.csv]').
data(3, 'movies_data_in_pandas_dataframe', 'TMDB_Movies_DataCleaning_Using_Pandas[movies_data_in_pandas_dataframe]').
data(4, 'genres', 'TMDB_Movies_DataCleaning_Using_Pandas[genres]').
data(5, 'release_date', 'TMDB_Movies_DataCleaning_Using_Pandas[release_date]').
data(6, 'genre_type_action', 'TMDB_Movies_DataCleaning_Using_Pandas[genre_type_action]').
data(7, 'genre_type_adventure', 'TMDB_Movies_DataCleaning_Using_Pandas[genre_type_adventure]').
data(8, '...17_others...', 'TMDB_Movies_DataCleaning_Using_Pandas[...17_others...]').
data(9, 'genre_type_war', 'TMDB_Movies_DataCleaning_Using_Pandas[genre_type_war]').
data(10, 'genre_type_western', 'TMDB_Movies_DataCleaning_Using_Pandas[genre_type_western]').
data(11, 'tmdb_5000_movies-OpenRefine-Pandas-Processed.csv', 'TMDB_Movies_DataCleaning_Using_Pandas[tmdb_5000_movies-OpenRefine-Pandas-Processed.csv]').

% FACT: channel(channel_id, data_id).
channel(4, 2).
channel(5, 2).
channel(6, 3).
channel(7, 4).
channel(8, 5).
channel(9, 5).
channel(10, 6).
channel(11, 7).
channel(12, 8).
channel(13, 9).
channel(14, 10).
channel(15, 12).
channel(16, 1).
channel(17, 1).
channel(18, 11).
channel(1, 5).
channel(2, 5).
channel(3, 5).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(2, 4).
port_connects_to_channel(15, 5).
port_connects_to_channel(3, 6).
port_connects_to_channel(4, 6).
port_connects_to_channel(5, 7).
port_connects_to_channel(7, 7).
port_connects_to_channel(14, 8).
port_connects_to_channel(13, 8).
port_connects_to_channel(14, 9).
port_connects_to_channel(21, 9).
port_connects_to_channel(8, 10).
port_connects_to_channel(16, 10).
port_connects_to_channel(9, 11).
port_connects_to_channel(17, 11).
port_connects_to_channel(10, 12).
port_connects_to_channel(18, 12).
port_connects_to_channel(11, 13).
port_connects_to_channel(19, 13).
port_connects_to_channel(12, 14).
port_connects_to_channel(20, 14).
port_connects_to_channel(22, 15).
port_connects_to_channel(2, 16).
port_connects_to_channel(15, 17).
port_connects_to_channel(22, 18).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 4).
inflow_connects_to_channel(1, 5).
inflow_connects_to_channel(1, 16).
inflow_connects_to_channel(1, 17).
inflow_connects_to_channel(13, 1).
inflow_connects_to_channel(13, 2).
inflow_connects_to_channel(13, 3).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(23, 15).
outflow_connects_to_channel(23, 18).
outflow_connects_to_channel(14, 1).
outflow_connects_to_channel(14, 2).
outflow_connects_to_channel(14, 3).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).

% FACT: extract_source(source_id, source_path).
extract_source(1, '').

% FACT: annotation(annotation_id, source_id, line_number, tag, keyword, value).
annotation(1, 1, 2, 'begin', '@begin', 'TMDB_Movies_DataCleaning_Using_Pandas').
annotation(2, 1, 2, 'desc', '@desc', 'Cleaning movies dataset using Pandas tool').
annotation(3, 1, 3, 'in', '@in', 'tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(4, 1, 3, 'uri', '@uri', 'file://tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(5, 1, 6, 'begin', '@begin', 'LoadDataUsingPandas').
annotation(6, 1, 6, 'desc', '@desc', 'Use OpenRefine to clean tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(7, 1, 7, 'in', '@in', 'tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(8, 1, 7, 'uri', '@uri', 'file://tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(9, 1, 8, 'out', '@out', 'movies_data_in_pandas_dataframe').
annotation(10, 1, 9, 'end', '@end', 'LoadDataUsingPandas').
annotation(11, 1, 11, 'begin', '@begin', 'IdentifyColumnsToProcessUsingPandas').
annotation(12, 1, 11, 'desc', '@desc', 'Use OpenRefine to clean tmdb_5000_movies.csv').
annotation(13, 1, 12, 'in', '@in', 'movies_data_in_pandas_dataframe').
annotation(14, 1, 13, 'out', '@out', 'genres').
annotation(15, 1, 14, 'out', '@out', 'release_date').
annotation(16, 1, 15, 'end', '@end', 'IdentifyColumnsToProcessUsingPandas').
annotation(17, 1, 17, 'begin', '@begin', 'CreateBinaryEncodedColumnsForEachGenre').
annotation(18, 1, 17, 'desc', '@desc', 'Use OpenRefine to clean tmdb_5000_movies.csv').
annotation(19, 1, 18, 'in', '@in', 'genres').
annotation(20, 1, 19, 'out', '@out', 'genre_type_action').
annotation(21, 1, 20, 'out', '@out', 'genre_type_adventure').
annotation(22, 1, 21, 'out', '@out', '...17_others...').
annotation(23, 1, 22, 'out', '@out', 'genre_type_war').
annotation(24, 1, 23, 'out', '@out', 'genre_type_western').
annotation(25, 1, 24, 'end', '@end', 'CreateBinaryEncodedColumnsForEachGenre').
annotation(26, 1, 26, 'begin', '@begin', 'FetchCorrectReleaseDataUsingTmdbAPI').
annotation(27, 1, 26, 'desc', '@desc', 'using grel:foreach method').
annotation(28, 1, 27, 'in', '@in', 'release_date').
annotation(29, 1, 28, 'out', '@out', 'release_date').
annotation(30, 1, 29, 'end', '@end', 'FetchCorrectReleaseDataUsingTmdbAPI').
annotation(31, 1, 31, 'begin', '@begin', 'AddNewProcessedColumnsToCreditsDataset').
annotation(32, 1, 31, 'desc', '@desc', 'Add binary-encoded dereived columns from 'genres' and updated 'release date' to the movie dataset').
annotation(33, 1, 32, 'in', '@in', 'tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(34, 1, 32, 'uri', '@uri', 'file://tmdb_5000_movies-OpenRefineProcessed.csv').
annotation(35, 1, 33, 'in', '@in', 'genre_type_action').
annotation(36, 1, 34, 'in', '@in', 'genre_type_adventure').
annotation(37, 1, 35, 'in', '@in', '...17_others...').
annotation(38, 1, 36, 'in', '@in', 'genre_type_war').
annotation(39, 1, 37, 'in', '@in', 'genre_type_western').
annotation(40, 1, 38, 'in', '@in', 'release_date').
annotation(41, 1, 39, 'out', '@out', 'tmdb_5000_movies-OpenRefine-Pandas-Processed.csv').
annotation(42, 1, 39, 'uri', '@uri', 'file://tmdb_5000_movies-OpenRefine-Pandas-Processed.csv').
annotation(43, 1, 40, 'end', '@end', 'AddNewProcessedColumnsToCreditsDataset').
annotation(44, 1, 42, 'out', '@out', 'tmdb_5000_movies-OpenRefine-Pandas-Processed.csv').
annotation(45, 1, 42, 'uri', '@uri', 'file://tmdb_5000_movies-OpenRefine-Pandas-Processed.csv').
annotation(46, 1, 44, 'end', '@end', 'TMDB_Movies_Datacleaning_Using_Pandas').

% FACT: annotation_qualifies(qualifying_annotation_id, primary_annotation_id).
annotation_qualifies(2, 1).
annotation_qualifies(4, 3).
annotation_qualifies(6, 5).
annotation_qualifies(8, 7).
annotation_qualifies(12, 11).
annotation_qualifies(18, 17).
annotation_qualifies(27, 26).
annotation_qualifies(32, 31).
annotation_qualifies(34, 33).
annotation_qualifies(42, 41).
annotation_qualifies(45, 44).
